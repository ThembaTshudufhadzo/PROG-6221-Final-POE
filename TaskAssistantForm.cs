// File: TaskAssistantForm.cs
using System;
using System.Windows.Forms;

namespace CyberSecurityChatbotGUI // IMPORTANT: Ensure this matches your project's root namespace
{
    public partial class TaskAssistantForm : Form
    {
        private TaskAssistant _taskAssistant;

        // Constructor to receive the TaskAssistant instance from the main form
        public TaskAssistantForm(TaskAssistant taskAssistant)
        {
            InitializeComponent(); // This method is generated by the designer
            _taskAssistant = taskAssistant;
            this.Text = "Task Assistant"; // Set the window title
            LoadTasks(); // Load tasks when the form opens
        }

        // Method to refresh the task list in the ListBox
        private void LoadTasks()
        {
            lstTasks.Items.Clear(); // Clear existing items in the ListBox

            string tasksString = _taskAssistant.GetTasks(); // Get tasks as a string from TaskAssistant

            // Split the string into individual task lines (excluding the header if present)
            string[] taskLines = tasksString.Split(new[] { '\n' }, StringSplitOptions.RemoveEmptyEntries);

            // Check if the response indicates no tasks. The 'tasksString.Contains' is more robust
            if (tasksString.Contains("no tasks currently"))
            {
                lstTasks.Items.Add("No tasks currently.");
            }
            else if (taskLines.Length > 1) // If there's a header and actual tasks
            {
                // Add tasks to the ListBox, skipping the "Your current tasks:" header (first line)
                for (int i = 1; i < taskLines.Length; i++)
                {
                    lstTasks.Items.Add(taskLines[i].Trim());
                }
            }
            // If there's only a single line and it's not "no tasks currently", it implies the header itself
            // but the 'contains' check for "no tasks currently" handles that.
        }

        // Event handler for the "Add Task" button
        private void btnAddTask_Click(object sender, EventArgs e)
        {
            string newTaskDescription = txtNewTask.Text.Trim();
            if (!string.IsNullOrEmpty(newTaskDescription))
            {
                _taskAssistant.AddTask(newTaskDescription);
                MessageBox.Show($"Task '{newTaskDescription}' added successfully!", "Task Added", MessageBoxButtons.OK, MessageBoxIcon.Information);
                txtNewTask.Clear(); // Clear the input textbox
                LoadTasks(); // Refresh the list to show the newly added task
            }
            else
            {
                MessageBox.Show("Please enter a task description.", "Input Required", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }

        // Event handler for the "Complete Selected" button
        private void btnCompleteTask_Click(object sender, EventArgs e)
        {
            if (lstTasks.SelectedIndex != -1) // Check if an item is selected
            {
                // Task numbers in TaskAssistant are 1-based, ListBox index is 0-based
                int taskNumberToComplete = lstTasks.SelectedIndex + 1;
                string result = _taskAssistant.CompleteTask(taskNumberToComplete);
                MessageBox.Show(result, "Complete Task", MessageBoxButtons.OK, MessageBoxIcon.Information);
                LoadTasks(); // Refresh the list after completion
            }
            else
            {
                MessageBox.Show("Please select a task to complete from the list.", "No Task Selected", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }

        // Event handler for the "Delete Selected" button
        private void btnDeleteTask_Click(object sender, EventArgs e)
        {
            if (lstTasks.SelectedIndex != -1) // Check if an item is selected
            {
                // Task numbers in TaskAssistant are 1-based, ListBox index is 0-based
                int taskNumberToDelete = lstTasks.SelectedIndex + 1;
                string result = _taskAssistant.DeleteTask(taskNumberToDelete);
                MessageBox.Show(result, "Delete Task", MessageBoxButtons.OK, MessageBoxIcon.Information);
                LoadTasks(); // Refresh the list after deletion
            }
            else
            {
                MessageBox.Show("Please select a task to delete from the list.", "No Task Selected", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }
    }
}